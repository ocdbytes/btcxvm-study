// ========================================================
// CONSTANTS

OP_0
OP_FALSE
// Stack :
// let a = bytes[] ---push--> STACK[]
// STACK[ a ]

NO_WORD // but opcode given a value
// Stack :
// 0x05 ---push--> STACK[]
// STACK[ 0x05 ]

OP_PUSHDATA1
// Eg ==>
// OP_PUSHDATA1
// Input :
// 0A
// 00112233445566778899
// 0A, 00112233445566778899
// [bytes size to be pushed into stack], [data]
// Stack :
// 10_bytes(00112233445566778899) ---push--> STACK[]
// STACK[ 00112233445566778899 ]

OP_PUSHDATA2
// Eg ==>
// OP_PUSHDATA2
// Input :
// 0A00
// 00112233445566778899
// [bytes size (2 bytes representation) to be pushed into stack (little endian format)], [data]
// Stack :
// 10_bytes(00112233445566778899) ---push--> STACK[]
// STACK[ 00112233445566778899 ]

OP_PUSHDATA4
// Eg ==>
// OP_PUSHDATA4
// Input :
// 0A000000
// 00112233445566778899
// [bytes size (4 bytes representation) to be pushed into stack (little endian format)], [data]
// Stack :
// 10_bytes(00112233445566778899) ---push--> STACK[]
// STACK[ 00112233445566778899 ]

OP_1NEGATE
// Stack :
// -1 ---push--> STACK[]
// STACK[ -1 ]

OP_1
OP_TRUE
// Stack :
// 1 ---push--> STACK[]
// STACK[ 1 ]

OP_2 // till OP_16
// Stack :
// Pushes the number into the stack
// OP_4
// STACK[ 4 ]

OP_RESERVED
// Terminates the program immediately


// ========================================================
// FLOW CONTROL

// <condition> OP_IF
//    <script if condition is true>
// OP_ELSE
//    <script if condition is false>
// OP_ENDIF


/*
if(condition) {
    2
}
*/
OP_1 OP_IF OP_2 OP_ENDIF

/*
if(condition) {
    2
}else{
    3
}
*/
OP_0 OP_IF OP_2 OP_ELSE OP_3 OP_ENDIF

/*
!if(condition) {
    2
}
*/
OP_0 OP_NOTIF OP_2 OP_ENDIF

/*
!if(condition) {
    2
}else{
    3
}
*/
OP_1 OP_IF OP_2 OP_ELSE OP_3 OP_ENDIF

// ========================================================
OP_VERIFY
// - Marks transaction as invalid if top stack value is not true. The top stack value is removed.

// ========================================================
OP_RETURN
// - OP_RETURN can also be used to create "False Return" outputs with a scriptPubKey consisting of OP_FALSE OP_RETURN followed by data. 
// - Such outputs are provably unspendable and should be given a value of zero Satoshis. These outputs can be pruned from storage in the UTXO set, reducing its size. 
// - Currently the BitcoinSV network supports multiple FALSE RETURN outputs in a given transaction with each one capable of holding up to 100kB of data. After the Genesis upgrade in 2020 miners will be free to mine transactions containing FALSE RETURN outputs of any size.

OP_EQUAL
// - Returns 1 if the inputs are exactly equal, 0 otherwise.
// => OP_EQUAL
// => STACK = [ 1 1 ]
// ...
// STACK = [ 1 1 ], output = true

OP_EQUALVERIFY
// - same as OP_EQUAL but (OP_EQUAL + OP_VERIFY)